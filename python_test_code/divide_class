from selenium import webdriver
from selenium.webdriver.common.by import By
from time import sleep

import numpy as np
import matplotlib.pyplot as plt
import csv
from datetime import datetime


#ここではクラスを作成する
#その後、取得したデータをヒストグラムで表す

class Yahoo_Web():
    #取得するデータのページ数を決める
    def __init__(self, page_num):
        self.url = "https://finance.yahoo.co.jp/stocks/ranking/dividendYield?market=all&term=daily&page="
        self.content_word = "StyledNumber__value__3rXW"
        self.content_loc = 4
        self.page_num = page_num
        self.result = []
        self.driver = webdriver.Chrome()
        self.max_divide = 10

    #ページ数が範囲内かどうか
    def check_page(self):
        if self.page_num < 1:
            self.page_num = 1
        elif self.page_num > 64:
            self.page_num = 64
    
    #データを取って来る
    def get_web_data(self):
        divides = self.driver.find_elements(By.CLASS_NAME, self.content_word)
        count = int(len(divides) / self.content_loc)
        for i in range(count):
            res = divides[self.content_loc*i + 3].text
            #ここの数字のプラスは除いて、数値にする
            self.result.append(float(res.replace('+', '')))

    #webを開いてデータを取得する
    def open_web(self):
        #数のチェック
        self.check_page()
        #ページごとに
        for i in range(self.page_num):
            wait = self.driver.implicitly_wait(3)
            self.driver.get(self.url + str(i+1))
            self.get_web_data()
    
    #表示用のプログラム
    def show_hist(self):
        #少数点を1桁にする、範囲は10までとする
        rounded_result = []
        for res in self.result:
            if res < self.max_divide:
                rounded_result.append(round(res, 1))
        
        divide_np = np.array(rounded_result)
        # ヒストグラムをプロットする
        plt.hist(divide_np, bins = 50)
        # タイトルとラベルを入れる
        plt.title('Histogram')
        plt.xlabel('divide(%)')
        plt.ylabel('freqency')
        plt.grid(True)
        # 現在時刻を取得
        dt = datetime.now()
        # datetime型から文字列に変換
        datetime_str = dt.strftime("%Y-%m-%d")
        #ヒストグラムをpng形式で保存する
        plt.savefig(datetime_str + '.png')
        plt.show()
    
    #重複をなくし、整列する
    def remove_duplicates(self, lst):
        new_list = list(set(lst))
        sorted_list = sorted(new_list)
        return sorted_list

    #数がいくつあるのかを数える
    def count_num(self, rounded_result):
        #この中の重複をなくす
        num_list = self.remove_duplicates(rounded_result)
        #数がいくつあるのかを数える
        count_list = []
        for num in num_list:
            count = 0
            for rou in rounded_result:
                if num == rou:
                    count += 1
            count_list.append([num, count])
        return count_list

    #カウントする関数
    def count_divide(self):
        rounded_result = []
        for res in self.result:
            rounded_result.append(round(res, 1))
        return self.count_num(rounded_result)

    #テキストファイルで結果を分類したものを保存する
    def write_text(self):
        #保存する前に分類分けをする
        #0.1ずつで分けてカウントできないか？
        count_list = self.count_divide()
        # 現在時刻を取得
        dt = datetime.now()
        # datetime型から文字列に変換
        datetime_str = dt.strftime("%Y-%m-%d") + ".csv"
        #csvファイル
        with open(datetime_str, 'w', newline="") as f:
            writer = csv.writer(f)
            writer.writerows(count_list)

#main関数
def main():
    yahoo_instance = Yahoo_Web(60)
    yahoo_instance.open_web()
    yahoo_instance.write_text()
    yahoo_instance.show_hist()

#処理
if __name__ == '__main__':
    main()
